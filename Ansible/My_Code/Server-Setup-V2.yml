---
- name: Disable firewalld, SELinux, install packages, configure logrotate, manage sudoers, set password policy, and configure journald on CentOS 9
  hosts: all
  become: true
  tasks:

    # === Stop and Disable Firewalld ===
    - name: Stop and disable firewalld service
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: false

    # === Disable SELinux in Config File ===
    - name: Ensure SELinux is disabled in config file
      ansible.builtin.replace:
        path: /etc/selinux/config
        regexp: '^SELINUX=enforcing'
        replace: 'SELINUX=disabled'

    # === Disable SELinux for Current Session ===
    - name: Disable SELinux enforcement for the current session
      ansible.builtin.command: setenforce 0
      ignore_errors: yes

    # === Install Required Packages (nmap, telnet, git) ===
    - name: Install required packages (nmap, telnet, git)
      ansible.builtin.yum:
        name:
          - nmap
          - telnet
          - git
        state: present

    # === Reboot Server for SELinux Changes ===
    - name: Reboot the server for SELinux changes to take effect
      ansible.builtin.reboot:
        msg: "Rebooting to apply SELinux disabled mode"
        reboot_timeout: 300
      when: ansible_connection != 'local'

    # === Configure Logrotate for /var/log/messages ===
    - name: Copy logrotate configuration for /var/log/messages
      ansible.builtin.copy:
        dest: /etc/logrotate.d/messages
        content: |
          /var/log/messages {
              weekly
              rotate 4
              dateext
              delaycompress
              compress
              missingok
              notifempty
              postrotate
                  /bin/systemctl reload rsyslog > /dev/null 2>&1 || true
              endscript
          }

    # === Set Ownership and Permissions for Logrotate File ===
    - name: Set ownership and permissions for logrotate file
      ansible.builtin.file:
        path: /etc/logrotate.d/messages
        owner: root
        group: root
        mode: '0644'

    # === Configure Sudoers File with Restricted Commands ===
    - name: Create or update sudoers file with restricted commands
      ansible.builtin.copy:
        dest: /etc/sudoers.d/restricted_commands
        content: |
          ## Allow sudo permission to user except su and shutdown commands
          abhijeet ALL=(ALL) ALL, !/sbin/shutdown, !/sbin/init 0, !/sbin/poweroff, !/bin/su -, !/bin/su
        owner: root
        group: root
        mode: '0440'

    # === Set Password Aging Policy Script ===
    - name: Create password aging policy script
      ansible.builtin.copy:
        dest: /usr/local/bin/update_password_policy.sh
        content: |
          #!/bin/bash
          MIN_DAYS=0
          MAX_DAYS=60
          WARNING_DAYS=14
          INACTIVE_DAYS=7

          # Iterate over users with UID >= 1000 and /bin/bash shell
          for user in $(awk -F: '($3 >= 1000 && $7 == "/bin/bash") {print $1}' /etc/passwd); do
              echo "Checking password aging policy for user: $user"

              # Get the current password age (last change in days)
              last_change=$(chage -l $user | grep "Last password change" | awk -F: '{ print $2 }' | xargs -I{} date -d {} +%s)
              current_date=$(date +%s)

              # Calculate days since last password change
              days_since_change=$(( (current_date - last_change) / (60*60*24) ))

              # Apply password aging settings
              chage -m $MIN_DAYS -M $MAX_DAYS -W $WARNING_DAYS -I $INACTIVE_DAYS $user

              # Expire the password only if it hasn't been changed in the last MAX_DAYS days
              if [ "$days_since_change" -gt "$MAX_DAYS" ]; then
                  echo "Expiring password for user: $user (password hasn't been changed in over $MAX_DAYS days)"
                  chage -d 0 $user
              else
                  echo "User $user has recently changed their password, skipping expiration."
              fi
          done
          echo "Password policy update complete."
        mode: '0755'

    # === Run Password Aging Policy Script ===
    - name: Run password aging policy script
      ansible.builtin.command: /usr/local/bin/update_password_policy.sh

    # === Ensure Journal Directory Exists ===
    - name: Ensure journal directory exists
      ansible.builtin.file:
        path: /var/log/journal
        state: directory
        mode: '2750'
      register: journal_dir
      check_mode: false

    # === Only set mode if it was not already set ===
    - name: Set journal directory permissions if necessary
      ansible.builtin.file:
        path: /var/log/journal
        mode: '2750'
      when: journal_dir.changed

    # === Ensure Correct Setup for Journal Logs (systemd-tmpfiles) ===
    - name: Ensure correct setup for journal logs with systemd-tmpfiles
      ansible.builtin.command: systemd-tmpfiles --create --prefix /var/log/journal

    # === Create Custom Journald Configuration Directory ===
    - name: Create custom journald configuration directory
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory

    # === Create or Update Custom Journald Configuration ===
    - name: Create or update custom journald configuration
      ansible.builtin.copy:
        dest: /etc/systemd/journald.conf.d/99-custom.conf
        content: |
          [Journal]
          Storage=persistent
          MaxRetentionSec=7d
        owner: root
        group: root
        mode: '0644'

    # === Restart Systemd-Journald to Apply Changes ===
    - name: Restart systemd-journald to apply changes
      ansible.builtin.systemd:
        name: systemd-journald
        state: restarted
